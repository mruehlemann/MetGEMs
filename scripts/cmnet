#!/usr/bin/env python
# Main script for running
import argparse
import sys


def buildcmNetwork(cmdArgs):
    """Create community network from HMP output.

    Args:
        cmdArgs (dictionary): args["folder", "output"]

    Returns: TODO

    """
    import argparse

    buildcmParser = argparse.ArgumentParser()
    buildcmParser.add_argument("")
    buildcmParser.add_argument("-k", type=int, help='k-mer size to use', default=4)
    buildcmParser.add_argument("-o", "--output", required=True)

    args = buildcmParser.parse_args(cmdArgs)

    print("Success")

def markerPlacement(cmdArgs):
    """Create community network from HMP output.

    Args:
        cmdArgs (dictionary): args["folder", "output"]

    Returns: TODO

    """
    import argparse

    buildcmParser = argparse.ArgumentParser()
    buildcmParser.add_argument("")
    buildcmParser.add_argument("-k", type=int, help='k-mer size to use', default=4)
    buildcmParser.add_argument("-o", "--output", required=True)

    args = buildcmParser.parse_args(cmdArgs)

    print("Success")


def main():
    """ Main entry for program.
    """
    commands = {"buildNetwork": buildcmNetwork,
                "markerPlacement": markerPlacement}

    usage_s = """cmnet <command> [args]"""
    commandParser = argparse.ArgumentParser(prog="CMNet", description="", usage=usage_s)
    commandParser.add_argument('command')
    args = commandParser.parse_args(sys.argv[1:2])

    if args.command not in commands:
        commandParser.print_help()
        exit(1)

    command = args.command
    commands[command](sys.argv[2:])

    return 0


if __name__ == '__main__':
    if len(sys.argv) == 1:
        exit(1)
    retCode = main() # Argument is global anyway...
    exit(retCode)
